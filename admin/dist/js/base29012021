var app = angular.module('akva', ['ngRoute', 'date-picker', 'flow', 'google-maps']);

//var connString = 'http://localhost:7085/';
//var connString = 'http://localhost:7085/';
// var tmpPath = '/antey-admin/';
//var tmpPath = '/ecom-admin/admin/';

var connString = 'http://95.217.134.152/api/v1/sync';
var connString1 = 'http://95.217.134.152/api/v1/sync';

var tmpPath = '/monitoring/';

app.run(function($rootScope, $location) {

    $rootScope.login = false;
    $location.url('/login');
})


app.config(['$routeProvider', '$locationProvider', function($routeProvider, $locationProvider) {

    $routeProvider.when('/', {
        templateUrl: tmpPath + 'tpl/items.tpl.html',
        controller: 'ItemsController'
    });


    $routeProvider.when('/items', {
        templateUrl: tmpPath + 'tpl/items.tpl.html',
        controller: 'ItemsController'
    });

    $routeProvider.when('/brands', {
        templateUrl: tmpPath + 'tpl/brands.tpl.html',
        controller: 'BrandsController'
    });

    $routeProvider.when('/categories', {
        templateUrl: tmpPath + 'tpl/categories.tpl.html',
        controller: 'CategoriesController'
    });

    $routeProvider.when('/subcategories', {
        templateUrl: tmpPath + 'tpl/subcategories.tpl.html',
        controller: 'SubCategoriesController'
    });

    $routeProvider.when('/:brand/items', {
        templateUrl: tmpPath + 'tpl/items-by-brand.tpl.html',
        controller: 'ItemsBrandController'
    });

    $routeProvider.when('/group/:group/items', {
        templateUrl: tmpPath + 'tpl/items-by-categories.tpl.html',
        controller: 'ItemsGroupsController'
    });

    $routeProvider.when('/orders', {
        templateUrl: tmpPath + 'tpl/orders.tpl.html',
        controller: 'OrdersController'
    });

    $routeProvider.when('/order-details/:id', {
        templateUrl: tmpPath + 'tpl/order-details.tpl.html',
        controller: 'OrderDetailsController'
    });

    $routeProvider.when('/customers', {
        templateUrl: tmpPath + 'tpl/customers.tpl.html',
        controller: 'CustomersController'
    });

    $routeProvider.when('/reviews', {
        templateUrl: tmpPath + 'tpl/reviews.tpl.html',
        controller: 'ReviewsController'
    });

    $routeProvider.when('/designer', {
        templateUrl: tmpPath + 'tpl/desinger.tpl.html',
        controller: 'DesignerController'
    });

    $routeProvider.when('/discounts', {
        templateUrl: tmpPath + 'tpl/discounts.tpl.html',
        controller: 'DiscountController'
    });

    $routeProvider.when('/news', {
        templateUrl: tmpPath + 'tpl/news.tpl.html',
        controller: 'NewsController'
    });

    $routeProvider.when('/login', {
        templateUrl: tmpPath + 'tpl/login.tpl.html',
        controller: 'LoginController',
        division: 'login'
    });

    $routeProvider.when('/logout', {
        templateUrl: tmpPath + 'tpl/login.tpl.html',
        controller: 'LoginController',
        division: 'logout'
    });

    $routeProvider.when('/register', {
        templateUrl: tmpPath + 'tpl/register.tpl.html',
        controller: 'RegisterController'
    });

    $routeProvider.when('/one-click', {
        templateUrl: tmpPath + 'tpl/oneclick-order.tpl.html',
        controller: 'OneClickController'
    });


    $routeProvider.when('/dashboard', {
        templateUrl: '/admin/tpl/dashboard.tpl.html',
        controller: 'TemplatesDashboard'
    });

    $routeProvider.when('/propmocodes', {
        templateUrl: '/static/tpl/promo-codes.tpl.html',
        controller: 'promoCodeController'
    });


    $routeProvider.when('/tpl/product', {
        templateUrl: '/static/tpl/productCodes.tpl.html',
        controller: 'ProductController'
    });
}])


    .controller('ItemsController', ['$scope', '$http', '$location', '$routeParams', '$timeout', function($scope, $http, $location, $routeParams, $timeout) {
        //$scope.name = $routeParams.name;
        $scope.raw = {};
        $http({ url: connString + 'products', method: 'GET' }).success(function(data) {
            $scope.products = data;


            $scope.currentPage = 1; //current page
            $scope.entryLimit = 50; //max no of items to display in a page
            $scope.filteredItems = $scope.products.length; //Initially for no filter
            $scope.totalItems = $scope.products.length;
            for (var i = 0; i < data.length; i++) {
                data[i].created = moment.utc(data[i].created).local().format('DD.MM.YY hh:mm:ss');
                data[i].modified = moment.utc(data[i].modified).local().format('DD.MM.YY hh:mm:ss');
            }
            // for (var i = 0; i < data.length; i++) {
            //     if (data[i].available == 1) data[i].available = "Доступен";
            //     if (data[i].status == 0) data[i].available = "Недоступен";
            // }

            $scope.editingData = {};

            for (var i = 0; i < data.length; i++) {
                $scope.editingData[$scope.products[i].id] = false;
            }


            /*for (var i = 0; i < data.templates.state; i++) {
                 if (data.templates[i].lastChanged) data.templates[i].lastChanged = moment.utc(data.templates[i].lastChanged).local().format('DD.MM.YY HH:mm:ss');
                 //if (data[i].apCreated) data[i].apCreated = moment.utc(data[i].apCreated).local().format('DD.MM.YY HH:mm:ss');
             }*/
        });
        $scope.setPage = function(pageN) {
            console.log(pageN);
            $scope.currentPage = pageN;
            //$scope.reload();
        };

        $scope.filter = function() {
            $timeout(function() {
                $scope.filteredItems = $scope.filtered.length;
            }, 10);
        };
        $scope.sort_by = function(predicate) {
            $scope.predicate = predicate;
            $scope.reverse = !$scope.reverse;
        };

        $scope.modify = function(tableData){
            console.log(tableData)
            $scope.editingData[tableData.id] = true;
        };


        $scope.update = function(tableData){
            $http({
                url: connString + 'productChangeInfo/' + tableData.id,
                method: 'POST',
                json: true,
                data: {
                    description: tableData.description
                }
            }).success(function() {
                console.log('changed description for item -> ' + tableData.id)
                $scope.editingData[tableData.id] = false;
            });

        };

    }])

    .controller('DiscountController', ['$scope', '$http', '$location', '$routeParams', '$timeout', function($scope, $http, $location, $routeParams, $timeout) {
        $scope.raw = {};
        $http({ url: connString + 'discounts', method: 'GET' }).success(function(data) {
            $scope.discounts = data;


            $scope.currentPage = 1; //current page
            $scope.entryLimit = 50; //max no of items to display in a page
            $scope.filteredItems = $scope.discounts.length; //Initially for no filter
            $scope.totalItems = $scope.discounts.length;
            for (var i = 0; i < data.length; i++) {
                data[i].created = moment.utc(data[i].created).local().format('DD.MM.YY hh:mm:ss');
                data[i].modified = moment.utc(data[i].modified).local().format('DD.MM.YY hh:mm:ss');
            }
            $scope.editingData = {};
            for (var i = 0; i < data.length; i++) {
                $scope.editingData[$scope.discounts[i].id] = false;
            }
        });
        $scope.setPage = function(pageN) {
            console.log(pageN);
            $scope.currentPage = pageN;
        };

        $scope.filter = function() {
            $timeout(function() {
                $scope.filteredItems = $scope.filtered.length;
            }, 10);
        };
        $scope.sort_by = function(predicate) {
            $scope.predicate = predicate;
            $scope.reverse = !$scope.reverse;
        };

        $scope.modify = function(tableData){
            console.log(tableData)
            $scope.editingData[tableData.id] = true;
        };

        $scope.update = function(tableData){
            $http({
                url: connString + 'discounts/' + tableData.id,
                method: 'POST',
                json: true,
                data: {
                    id: tableData.id,
                    discount: tableData.discount,
                    code: tableData.code,
                }
            }).success(function() {
                console.log('changed discount info for promocode -> ' + tableData.id)
                $scope.editingData[tableData.id] = false;
            });

        };

        $scope.delete = function(tableData){
            $http({
                url: connString + 'discounts/' + tableData.id,
                method: 'DELETE',
                json: true,
            }).success(function() {
                console.log('delete discount-> ' + tableData.id)
            });
        };

    }])


    .controller('NewsController', ['$scope', '$http', '$location', '$routeParams', '$timeout', function($scope, $http, $location, $routeParams, $timeout) {
        $scope.raw = {};
        $http({ url: connString + 'news', method: 'GET' }).success(function(data) {
            $scope.news = data;
            $scope.currentPage = 1; //current page
            $scope.entryLimit = 50; //max no of items to display in a page
            $scope.filteredItems = $scope.news.length; //Initially for no filter
            $scope.totalItems = $scope.news.length;
/*            for (var i = 0; i < data.length; i++) {
                data[i].created = moment.utc(data[i].created).local().format('DD.MM.YY hh:mm:ss');
                data[i].modified = moment.utc(data[i].modified).local().format('DD.MM.YY hh:mm:ss');
            }*/
            $scope.editingData = {};
            for (var i = 0; i < data.length; i++) {
                $scope.editingData[$scope.news[i].id] = false;
            }
        });
        $scope.setPage = function(pageN) {
            console.log(pageN);
            $scope.currentPage = pageN;
        };
        $scope.filter = function() {
            $timeout(function() {
                $scope.filteredItems = $scope.filtered.length;
            }, 10);
        };
        $scope.sort_by = function(predicate) {
            $scope.predicate = predicate;
            $scope.reverse = !$scope.reverse;
        };

        $scope.modify = function(tableData){
            console.log(tableData)
            $scope.editingData[tableData.id] = true;
        };

        $scope.update = function(tableData){
            $http({
                url: connString + 'news/' + tableData.id,
                method: 'POST',
                json: true,
                data: {
                    id: tableData.id,
                    title: tableData.title,
                    description: tableData.description
                }
            }).success(function() {
                console.log('changed news for item -> ' + tableData.id)
                $scope.editingData[tableData.id] = false;
            });
        };

        $scope.delete = function(tableData){
            $http({
                url: connString + 'news/' + tableData.id,
                method: 'DELETE',
                json: true,
            }).success(function() {
                console.log('deleted news Info-> ' + tableData.id)
            });
        };
    }])


    .controller('BrandsController', ['$scope', '$http', '$location', '$routeParams', '$timeout', function($scope, $http, $location, $routeParams, $timeout) {
        //$scope.name = $routeParams.name;
        $scope.raw = {};
        $http({ url: connString + 'brands', method: 'GET' }).success(function(data) {
            $scope.brands = data;
            $scope.currentPage = 1; //current page
            $scope.entryLimit = 50; //max no of items to display in a page
            $scope.filteredItems = $scope.brands.length; //Initially for no filter
            $scope.totalItems = $scope.brands.length;
            for (var i = 0; i < data.length; i++) {
                data[i].created = moment.utc(data[i].created).local().format('DD.MM.YY hh:mm:ss');
                data[i].modified = moment.utc(data[i].modified).local().format('DD.MM.YY hh:mm:ss');
            }
        });
        $scope.setPage = function(pageN) {
            console.log(pageN);
            $scope.currentPage = pageN;
            //$scope.reload();
        };

        $scope.filter = function() {
            $timeout(function() {
                $scope.filteredItems = $scope.filtered.length;
            }, 10);
        };
        $scope.sort_by = function(predicate) {
            $scope.predicate = predicate;
            $scope.reverse = !$scope.reverse;
        };
    }])

    .controller('CategoriesController', ['$scope', '$http', '$location', '$routeParams', '$timeout', function($scope, $http, $location, $routeParams, $timeout) {
        //$scope.name = $routeParams.name;
        $scope.raw = {};
        $http({ url: connString + 'categories', method: 'GET' }).success(function(data) {
            $scope.brands = data;
            $scope.currentPage = 1; //current page
            $scope.entryLimit = 50; //max no of items to display in a page
            $scope.filteredItems = $scope.brands.length; //Initially for no filter
            $scope.totalItems = $scope.brands.length;
            for (var i = 0; i < data.length; i++) {
                data[i].created = moment.utc(data[i].created).local().format('DD.MM.YY hh:mm:ss');
                data[i].modified = moment.utc(data[i].modified).local().format('DD.MM.YY hh:mm:ss');
            }
        });
        $scope.setPage = function(pageN) {
            console.log(pageN);
            $scope.currentPage = pageN;
            //$scope.reload();
        };

        $scope.filter = function() {
            $timeout(function() {
                $scope.filteredItems = $scope.filtered.length;
            }, 10);
        };
        $scope.sort_by = function(predicate) {
            $scope.predicate = predicate;
            $scope.reverse = !$scope.reverse;
        };
        $scope.tplEdit = function(id) {
            $location.url('/category/edit/' + id);
        };

    }])

    .controller('SubCategoriesController', ['$scope', '$http', '$location', '$routeParams', '$timeout', function($scope, $http, $location, $routeParams, $timeout) {
        //$scope.name = $routeParams.name;
        $scope.raw = {};
        $http({ url: connString + 'subcategories', method: 'GET' }).success(function(data) {
            $scope.groups = data;
            $scope.currentPage = 1; //current page
            $scope.entryLimit = 50; //max no of items to display in a page
            $scope.filteredItems = $scope.groups.length; //Initially for no filter
            $scope.totalItems = $scope.groups.length;
            for (var i = 0; i < data.length; i++) {
                data[i].created = moment.utc(data[i].created).local().format('DD.MM.YY hh:mm:ss');
                data[i].modified = moment.utc(data[i].modified).local().format('DD.MM.YY hh:mm:ss');
            }
        });
        $scope.setPage = function(pageN) {
            console.log(pageN);
            $scope.currentPage = pageN;
            //$scope.reload();
        };

        $scope.filter = function() {
            $timeout(function() {
                $scope.filteredItems = $scope.filtered.length;
            }, 10);
        };
        $scope.sort_by = function(predicate) {
            $scope.predicate = predicate;
            $scope.reverse = !$scope.reverse;
        };
        $scope.tplEdit = function(id) {
            $location.url('/category/edit/' + id);
        };

    }])

    .controller('ItemsBrandController', ['$scope', '$http', '$location', '$routeParams', '$timeout', function($scope, $http, $location, $routeParams, $timeout) {
        $scope.brand = $routeParams.brand;
        $scope.raw = {};
        $http({ url: connString + '/brand/products/' + $scope.brand, method: 'GET' }).success(function(data) {
            $scope.products = data;
            $scope.currentPage = 1; //current page
            $scope.entryLimit = 50; //max no of items to display in a page
            $scope.filteredItems = $scope.products.length; //Initially for no filter
            $scope.totalItems = $scope.products.length;
            for (var i = 0; i < data.length; i++) {
                data[i].created = moment.utc(data[i].created).local().format('DD.MM.YY hh:mm:ss');
                data[i].modified = moment.utc(data[i].modified).local().format('DD.MM.YY hh:mm:ss');
            }

            for (var i = 0; i < data.length; i++) {
                if (data[i].available == 1) data[i].available = "Доступен";
                if (data[i].status == 0) data[i].available = "Недоступен";
            }

        });
        $scope.setPage = function(pageN) {
            console.log(pageN);
            $scope.currentPage = pageN;
            //$scope.reload();
        };

        $scope.filter = function() {
            $timeout(function() {
                $scope.filteredItems = $scope.filtered.length;
            }, 10);
        };
        $scope.sort_by = function(predicate) {
            $scope.predicate = predicate;
            $scope.reverse = !$scope.reverse;
        };
        $scope.tplEdit = function(id) {
            $location.url('/template/edit/' + id);
        };

        $scope.tplBackImage = function(id) {
            $location.url('/template/image/' + id);
        };


        $scope.tplInfo = function(mac) {
            $location.url('/templateInfo/' + mac);
        };

    }])

    .controller('ItemsGroupsController', ['$scope', '$http', '$location', '$routeParams', '$timeout', function($scope, $http, $location, $routeParams, $timeout) {
        $scope.group = $routeParams.group;
        $scope.raw = {};
        $http({ url: connString + '/group/products/' + $scope.group, method: 'GET' }).success(function(data) {
            $scope.products = data;
            $scope.currentPage = 1; //current page
            $scope.entryLimit = 50; //max no of items to display in a page
            $scope.filteredItems = $scope.products.length; //Initially for no filter
            $scope.totalItems = $scope.products.length;
            for (var i = 0; i < data.length; i++) {
                data[i].created = moment.utc(data[i].created).local().format('DD.MM.YY hh:mm:ss');
                data[i].modified = moment.utc(data[i].modified).local().format('DD.MM.YY hh:mm:ss');
            }
            for (var i = 0; i < data.length; i++) {
                if (data[i].available == 1) data[i].available = "Доступен";
                if (data[i].status == 0) data[i].available = "Недоступен";
            }
        });
        $scope.setPage = function(pageN) {
            console.log(pageN);
            $scope.currentPage = pageN;
            //$scope.reload();
        };

        $scope.filter = function() {
            $timeout(function() {
                $scope.filteredItems = $scope.filtered.length;
            }, 10);
        };
        $scope.sort_by = function(predicate) {
            $scope.predicate = predicate;
            $scope.reverse = !$scope.reverse;
        };
        $scope.tplEdit = function(id) {
            $location.url('/template/edit/' + id);
        };

        $scope.tplBackImage = function(id) {
            $location.url('/template/image/' + id);
        };

        $scope.tplInfo = function(mac) {
            $location.url('/templateInfo/' + mac);
        };

    }])

    .controller('OrdersController', ['$scope', '$http', '$location', '$routeParams', '$timeout', function($scope, $http, $location, $routeParams, $timeout) {
        $scope.raw = {};

        $scope.searchOrders = function() {
            var date = $scope.datepicker;
            var date1 = moment.utc(date).local().format('YYYY-MM-DD')
            if (date != undefined) {
                $scope.getOrders(date1);
            } else {
                alert("Выберите дату!")
            }
        };

        $scope.getOrders = function(date) {
            $http({
                url: connString + 'orders/' + date,
                method: 'GET'
            }).success(function(data) {
                $scope.orders = data;
                $scope.currentPage = 1; //current page
                $scope.entryLimit = 20; //max no of items to display in a page
                $scope.filteredItems = data.length; //Initially for no filter  
                $scope.totalItems = data.length;
                for (var i = 0; i < data.length; i++) {
                    if (data[i].created) data[i].created = moment.utc(data[i].created).local().format('DD.MM.YY HH:mm:ss');
                    if (data[i].modified) data[i].modified = moment.utc(data[i].modified).local().format('DD.MM.YY HH:mm:ss');
                    if (data[i].paid == 1) data[i].paid = "Да";
                    if (data[i].paid == 0) data[i].paid = "Нет";
                }


            });
        };



        $scope.setPage = function(pageN) {
            console.log(pageN);
            $scope.currentPage = pageN;
            //$scope.reload();
        };

        $scope.filter = function() {
            $timeout(function() {
                $scope.filteredItems = $scope.filtered.length;
            }, 10);
        };
        $scope.sort_by = function(predicate) {
            $scope.predicate = predicate;
            $scope.reverse = !$scope.reverse;
        };

        $scope.OrderInfo = function(name) {
            $location.url('/order/' + id);

        };
        $scope.CustomerInfo = function(id) {
            $location.url('/customer/' + id);
        };

    }])

    .controller('OrderDetailsController', ['$scope', '$http', '$location', '$routeParams', '$timeout', function($scope, $http, $location, $routeParams, $timeout) {
        $scope.order = $routeParams.id;
        // $scope.showInfoWindow = function(event, p, map) {
        //     console.log(p);
        //     var infowindow = new google.maps.InfoWindow();
        //     var center = new google.maps.LatLng(p[0], p[1]);

        //     infowindow.setContent(
        //         '<h3>' + p + '</h3>');

        //     infowindow.setPosition(center);
        //     infowindow.open(map);
        // };
        // var infowindow = new google.maps.InfoWindow();

        $http({
            url: connString + 'order/' + $scope.order,
            method: 'GET'
        }).success(function(data, status, headers, config) {
            $scope.items = data[0].orderDetails;
            $scope.order = data[0];
            $scope.totalItems = $scope.items.length;
            $scope.currentPage = 1;
            $scope.entryLimit = 20;
            $scope.filteredItems = $scope.items.length;
            if (order.created) order.created = moment.utc(order.created).local().format('DD.MM.YY HH:mm:ss');
            if(order.notCall == 1) order.notCall = "Да";
            if(order.notCall == 0) order.notCall = "Нет";
            // $scope.orderTime= moment.utc(order.created).local().format('DD.MM.YY HH:mm:ss');
            var vm = this;

            vm.shop = data[0];

            vm.showDetail = function(e, shop) {
                vm.shop = shop;
                vm.map.showInfoWindow('foo-iw', shop.orderID);
            };

            vm.hideDetail = function() {
                vm.map.hideInfoWindow('foo-iw');
            };
            // maxlat += (maxlat - minlat) * 0.3;
            // minlat -= (maxlat - minlat) * 0.3;
            // maxlng += (maxlng - minlng) * 0.3;
            // minlng -= (maxlng - minlng) * 0.3;
            // $scope.bounds = {
            //     northeast: { latitude: maxlat, longitude: maxlng },
            //     southwest: { latitude: minlat, longitude: minlng }
            // };
            // $scope.center = {
            //     latitude: minlat + (maxlat - minlat) / 2,
            //     longitude: minlng + (maxlng - minlng) / 2
            // };
            // console.log($scope.bounds);
        });

        $scope.setPage = function(pageN) {
            console.log(pageN);
            $scope.currentPage = pageN;
            //$scope.reload();
        };
        $scope.filter = function() {
            $timeout(function() {
                $scope.filteredItems = $scope.filtered.length;
            }, 10);
        };
        $scope.sort_by = function(predicate) {
            $scope.predicate = predicate;
            $scope.reverse = !$scope.reverse;
        };

    }])

    .controller('CustomersController', ['$scope', '$http', '$location', '$routeParams', '$timeout', function($scope, $http, $location, $routeParams, $timeout) {
        $scope.group = $routeParams.group;
        $scope.raw = {};
        $http({ url: connString + 'customers', method: 'GET' }).success(function(data) {
            $scope.customers = data;
            $scope.currentPage = 1; //current page
            $scope.entryLimit = 50; //max no of items to display in a page
            $scope.filteredItems = $scope.customers.length; //Initially for no filter
            $scope.totalItems = $scope.customers.length;
            for (var i = 0; i < data.length; i++) {
                data[i].created = moment.utc(data[i].created).local().format('DD.MM.YY hh:mm:ss');
            }
        });
        $scope.setPage = function(pageN) {
            console.log(pageN);
            $scope.currentPage = pageN;
            //$scope.reload();
        };

        $scope.filter = function() {
            $timeout(function() {
                $scope.filteredItems = $scope.filtered.length;
            }, 10);
        };
        $scope.sort_by = function(predicate) {
            $scope.predicate = predicate;
            $scope.reverse = !$scope.reverse;
        };

    }])

    .controller('ReviewsController', ['$scope', '$http', '$location', '$routeParams', '$timeout', function($scope, $http, $location, $routeParams, $timeout) {
        $scope.group = $routeParams.group;
        $scope.raw = {};

        $http({ url: connString + 'reviews', method: 'GET' }).success(function(data) {
            $scope.reviews = data;
            $scope.currentPage = 1; //current page
            $scope.entryLimit = 50; //max no of items to display in a page
            $scope.filteredItems = $scope.reviews.length; //Initially for no filter
            $scope.totalItems = $scope.reviews.length;
            for (var i = 0; i < data.length; i++) {
                data[i].created = moment.utc(data[i].created).local().format('DD.MM.YY hh:mm:ss');
                data[i].modified = moment.utc(data[i].modified).local().format('DD.MM.YY hh:mm:ss');

            }
        });
        $scope.setPage = function(pageN) {
            console.log(pageN);
            $scope.currentPage = pageN;
            //$scope.reload();
        };

        $scope.filter = function() {
            $timeout(function() {
                $scope.filteredItems = $scope.filtered.length;
            }, 10);
        };
        $scope.sort_by = function(predicate) {
            $scope.predicate = predicate;
            $scope.reverse = !$scope.reverse;
        };

        $scope.enableReview = function(id, state) {
            console.log(id);
            console.log(state)
            $http({
                url: connString + 'enableReview/' + id,
                method: 'POST',
                json: true,
                data: {
                    visible: state
                }
            }).success(function() {
                console.log('changed review state for id ' + id)
            });
        };

    }])

    .controller('DesignerController', ['$scope', '$http', '$location', '$routeParams', '$timeout', function($scope, $http, $location, $routeParams, $timeout) {
        $scope.solutionType = "designer_solutions";
        $scope.discount = 10;
        $scope.data = [];
        $scope.position = [];
        $scope.group = $routeParams.group;
        $scope.raw = {};

        $scope.url = "";

        $scope.photofileChanged = function(element){
            getPromise(element.files[0]);
            $scope.data = [];
            $scope.position = [];
        }

        function getPromise(file){
            return new Promise(function(resolve, reject){
                var reader = new FileReader();
                reader.onload = function(evt){
                    $scope.$apply(() => {
                        $scope.url = evt.target.result;
                    });
                };
                reader.onerror = function(error) {
                    reject(error);
                };
                reader.readAsDataURL(file);
            });
        }

        $scope.handleDelete = function(id){
            $scope.position.splice(id, 1);
            $scope.data.splice(id, 1);
        }

        $scope.handleSkuChange= function(sku, index){
            $http({ url: connString + 'product/' + sku,
                method: 'GET' }).success(function(res) {
                if( res.length !== 0 ){
                    $scope.data[index].checked = true;
                    $scope.data[index].price = res[0].price;
                } else {
                    $scope.data[index].checked = false;
                    $scope.data[index].price = '';
                }
            });
        }

        $scope.handleImagePos= function(e){
            let hh = document.getElementById('header').offsetHeight;
            let parentWidth = document.getElementById('parent-img').offsetWidth;
            let parentHeight = document.getElementById('parent-img').offsetHeight;
            const insertItem = {
                posX: parentWidth === 0? 0 : Math.round((e.offsetX - 12)* 100 / parentWidth),
                posY: parentHeight === 0? 0 : Math.round((e.offsetY - 12)* 100 / parentHeight),
                sku: '',
                price: '',
                checked: false
            };
            $scope.position.push({X: e.offsetX, Y: e.offsetY+hh});
            $scope.data.push(insertItem);
        }
        $scope.filter = function() {
            $timeout(function() {
                $scope.filteredItems = $scope.filtered.length;
            }, 10);
        };
        $scope.sort_by = function(predicate) {
            $scope.predicate = predicate;
            $scope.reverse = !$scope.reverse;
        };

        $scope.fileUpload = function(){
            if( $scope.url === "" ) {
                alert("Please select a new image");
                return;
            }
            const reqProd = $scope.data.filter((item)=>item.checked);
            let formData = new FormData();
            formData.append('image_file', $scope.url);
            formData.append('tag', $scope.solutionType);
            formData.append('discount', $scope.discount);
            formData.append('items', JSON.stringify(reqProd));

            var request = new XMLHttpRequest();
            request.open("POST", connString + 'designer');
            request.onload = function () {
                if (request.readyState === request.DONE) {
                    if (request.status === 200) {
                        var response = JSON.parse(request.responseText);
                        console.log('response data :: ', response);
                        if( response.success){
                            console.log("success")
                            $scope.$evalAsync( function(){
                                $scope.data = [];
                                $scope.position = [];
                                $scope.url = "";
                                window.document.getElementById('background_image').src = '';
                                window.document.getElementById('upload_photo').value = '';
                            })
                        }
                    }
                }
            }
            request.send(formData);
        }
    }])

    .controller('LoginController', ['$rootScope', '$route', '$scope', '$http', '$location', '$routeParams', '$timeout', function($rootScope, $route, $scope, $http, $location, $routeParams, $timeout) {
        $scope.email = '';
        $scope.password = '';
        var division = $route.current.$$route.division;

        if (division == 'logout') {
            $rootScope.login = false;
        }

        $scope.login = () => {
            console.log('email, password :: ', $scope.email, '=>', $scope.password);
            const reqData = {
                email: $scope.email,
                password: $scope.password
            };
            $http({
                url: connString1 + 'adminlogin',
                method: 'POST',
                data:reqData
            }).success(function(response) {
                if( response.success ){
                    $rootScope.login = true;
                    $location.url('/');
                } else {
                    alert(response.message);
                    return;
                }
            });
            if ($scope.email == 'ex@ex.com') {

            }
        }
        $scope.facebook_login = () => {
            console.log("facebook login :: ")
        }

        $scope.google_login = () => {
            console.log("google login :: ")
        }

    }])


    .controller('RegisterController', ['$rootScope', '$scope', '$http', '$location', '$routeParams', '$timeout', function($rootScope, $scope, $http, $location, $routeParams, $timeout) {
        $scope.fullname = '';
        $scope.regemail = '';
        $scope.regpassword = '';
        $scope.repeatpassword = '';
        $scope.emailFormat = /^[a-z]+[a-z0-9._]+@[a-z]+\.[a-z.]{2,5}$/;
        $scope.signup = () => {
            console.log('email, password :: ',$scope.fullname, $scope.regemail, '=>', $scope.regpassword, $scope.repeatpassword);
            if( $scope.fullname === "" ){
                alert("Please input the full name");
                return;
            }
            if( !$scope.emailFormat.test($scope.regemail) ){
                alert("Email is incorrect");
                return;
            }
            if($scope.regpassword !== $scope.repeatpassword ){
                alert("Password is incorrect");
                return;
            }
            if( $scope.regpassword.length < 6 ){
                alert("Password must be at least 6 digits");
                return;
            }
            const reqData = {
                fullname : $scope.fullname,
                email : $scope.regemail,
                password: $scope.regpassword
            }

            $http({
                url: connString1 + 'adminregister',
                method: 'POST',
                data: reqData
            }).success(function(response) {
                if( response.success ){
                    $location.url('/login');
                } else {
                    alert(response.message);
                    return;
                }
            });
        }
        $scope.facebook_signup = () => {
            console.log("facebook login :: ")
        }

        $scope.google_signup = () => {
            console.log("google login :: ")
        }

    }])

    .controller('OneClickController', ['$scope', '$http', '$location', '$routeParams', '$timeout', function($scope, $http, $location, $routeParams, $timeout) {
        $scope.group = $routeParams.group;
        $scope.raw = {};
        $http({ url: connString + 'oneClickOrders', method: 'GET' }).success(function(data) {
            $scope.orders = data;
            $scope.currentPage = 1; //current page
            $scope.entryLimit = 50; //max no of items to display in a page
            $scope.filteredItems = $scope.orders.length; //Initially for no filter
            $scope.totalItems = $scope.orders.length;
            for (var i = 0; i < data.length; i++) {
                data[i].created = moment.utc(data[i].created).local().format('DD.MM.YY hh:mm:ss');
                data[i].modified = moment.utc(data[i].modified).local().format('DD.MM.YY hh:mm:ss');

            }
        });
        $scope.setPage = function(pageN) {
            console.log(pageN);
            $scope.currentPage = pageN;
            //$scope.reload();
        };

        $scope.filter = function() {
            $timeout(function() {
                $scope.filteredItems = $scope.filtered.length;
            }, 10);
        };
        $scope.sort_by = function(predicate) {
            $scope.predicate = predicate;
            $scope.reverse = !$scope.reverse;
        };

        $scope.contactedOrder = function(id, state) {
            console.log(id);
            console.log(state)
            $http({
                url: connString + 'changeOneClickOrder/' + id,
                method: 'POST',
                json: true,
                data: {
                    active: state
                }
            }).success(function() {
                console.log('changed one click order state for review ' + id)
            });
        };

    }])

    .controller('MainController', ['$scope', '$location', function($scope, $location) {
        $scope.searchInput = '';
        $scope.doSearch = function() {
            $location.url('/search/?query=' + $scope.searchInput);
        };
    }])

    .filter('startFrom', function() {
        return function(input, start) {
            //if (!input || !input.length) { return; }
            if (input) {
                start = +start; //parse to int
                return input.slice(start);
            }
            return [];
        }
    })